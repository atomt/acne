#!/usr/bin/perl

use 5.014;
use warnings FATAL => 'all';
use autodie;

use FindBin;
use lib "$FindBin::Bin/../share/perl";

use ACNE::Common;
use ACNE::Account;
use ACNE::Cert;
use ACNE::CA;

use Getopt::Long;
use File::Spec::Functions;
use HTTP::Tiny;
use Data::Dumper;

my $id = shift;
my (
  @arg_dns,
  @arg_for,
  $arg_ca,
  $arg_key,
  $arg_roll_key,
  $arg_account,
  $arg_renew_left_days
);

GetOptions(
  'dns=s'      => \@arg_dns,
  'for=s'      => \@arg_for,
  'ca=s'       => \$arg_ca,
  'key=s'      => \$arg_key,
  'roll-key!'  => \$arg_roll_key,
  'account=s'  => \$arg_account,
  'renew-left' => \$arg_renew_left_days
) or die "try acne help\n";

umask 0077;
chdir catdir(@ACNE::Common::libdir);

my $cert = ACNE::Cert->new($id, {
  'dns'        => \@arg_dns,
  'for'        => \@arg_for,
  'ca'         => $arg_ca,
  'key'        => $arg_key,
  'roll-key'   => $arg_roll_key,
  'account'    => $arg_account,
  'renew-left' => $arg_renew_left_days
});

my $ca_id      = $cert->getCAId;
my $account_id = $cert->getAccountId;

say sprintf("Using account %s, CA %s, key %s, roll-key %s (on renewals)",
  $account_id,
  $ca_id,
  $cert->getKeyConf,
  $cert->getRollKey
);

my $account = ACNE::Account->new($account_id);
my $ca = ACNE::CA->new($ca_id, $account->keyInit);
$ca->nonceInit;

# Register account
$account->register($ca, $ca_id)
  if !$account->registered($ca, $ca_id);

# Authorize domains
my $acme_dir = '/var/lib/acne/http'; # XXX config under group/for?
my $http = HTTP::Tiny->new();

for my $domain ( @arg_dns ) {
	say "Authenticating domain $domain";

	# This is somewhat naive and hackish for now. more or less lifted
	# from acme-tiny.
	say "Requesting challenges";
	my @challenges = grep { $_->{'type'} eq 'http-01' } @{$ca->domainAuth($domain)};
	my $challenge = $challenges[0];
	my $token = $challenge->{'token'}; $token =~ s![^A-Za-z0-9_\-]!_!g;
	my $thumbprint = $ca->jws->thumbprint;
	my $keyauth = $token . '.' . $thumbprint;
	my $wellknown_path = catdir($acme_dir, $token);

	say "Publishing";
	{
		open my $fh, '>', $wellknown_path;
		print $fh $keyauth;
	}

	# Perhaps have a challenge hook like the install.d/remove.d ones
	# -> we could use dns challenges and such as well.

	# Test HTTP fetching file from $domain/.well-known/acme-challenge/$token
	# before bothering polling ACME.
	say "HTTP sanity test";

	# Notify ready
	say "Notify ACME we are ready";

	# Poll ACME
	say "Waiting..";

	say Dumper(\@challenges);
}

# Make CSR and request the cert(s)
say "Requesting certificate";


#say Dumper($jws);
#say Dumper($cert);
#say Dumper($account);
#say Dumper($ca);
