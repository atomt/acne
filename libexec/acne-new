#!/usr/bin/perl

use 5.014;
use warnings FATAL => 'all';
use autodie;

use FindBin;
use lib "$FindBin::Bin/../share/perl";

use ACNE::Common;
use ACNE::Account;
use ACNE::Cert;
use ACNE::CA;

use Getopt::Long;
use File::Spec::Functions;
use HTTP::Tiny;
use Data::Dumper;

my $id = shift;
my (
  @arg_dns,
  @arg_for,
  $arg_ca,
  $arg_key,
  $arg_roll_key,
  $arg_account,
  $arg_renew_left_days
);

GetOptions(
  'dns=s'      => \@arg_dns,
  'for=s'      => \@arg_for,
  'ca=s'       => \$arg_ca,
  'key=s'      => \$arg_key,
  'roll-key!'  => \$arg_roll_key,
  'account=s'  => \$arg_account,
  'renew-left' => \$arg_renew_left_days
) or die "try acne help\n";

umask 0077;
chdir catdir(@ACNE::Common::libdir);

my $cert = ACNE::Cert->new($id, {
  'dns'        => \@arg_dns,
  'for'        => \@arg_for,
  'ca'         => $arg_ca,
  'key'        => $arg_key,
  'roll-key'   => $arg_roll_key,
  'account'    => $arg_account,
  'renew-left' => $arg_renew_left_days
});

my $ca_id      = $cert->getCAId;
my $account_id = $cert->getAccountId;

say sprintf("Using account %s, CA %s, key %s, roll-key %s (on renewals)",
  $account_id,
  $ca_id,
  $cert->getKeyConf,
  $cert->getRollKey
);

my $account = ACNE::Account->new($account_id);
my $ca = ACNE::CA->new($ca_id, $account->keyInit);
$ca->nonceInit;

# Register account
$account->register($ca, $ca_id)
  if !$account->registered($ca, $ca_id);

$cert->issue($ca);

$cert->save;

#say Dumper($jws);
#say Dumper($cert);
#say Dumper($account);
#say Dumper($ca);
